プログラミング言語
　手続き型言語
　　C,C++、Java、Basic,FORTRAN、PASCAL
　　python, PHP, Perl, COBOL

　関数型言語
　　LISP　LISt Processing(リスト処理）
　　　emacs はLISPで書かれたプログラム

　宣言型言語
　　Prolog　Programming in Logic
　

Common LISPのUbuntuへの導入
  $ sudo apt install clisp  　　　//でclispをインストール
  $ which clisp       これで/usr/bin/clispと出たらインストール成功
　$ clisp　　　　　　　これでclisp開始


LISPのプログラミング
　LISt Processing リスト処理
　　(1 2 3 4 5)   リストの例
　　(+ 1 2 3 4)   →　10
    (+ (+ 1 2) (+ 3 4))
  Lot's of Inspid Stupid Parenthesis  馬鹿みたいにカッコが多い

LISPはインタープリタ方式の実行
　入力された命令を即座に実行して結果を返す。
参考：C++はコンパイラ方式の実行
　入力された命令群をまとめてコンパイル後に実行して結果を返す。


演習
　上底12、下底16、高さ8の台形の面積を求める


１．LISPのプログラムの大部分は関数である。
　関数の呼び出し方
　　C++の場合　　関数名(引数1,引数2,…）
　　LISPの場合　 (関数名　引数1　引数2　…)
                    例　(+ 1 2)
　　　LISPでは「関数を評価(eval)する」と言う。

２．アトムとリスト
　LISPにおける記号式の２つの基本形が　アトム　と　リスト

　アトム：単純要素(それ以上分解できないもの：原子と同じ）
　　例　1,  +,  apple,  I_like_an_apple
　リスト：()で囲まれた構造
　　例　(1 2 3 4)
        (cat dog hamster)
        (apple)
        (apple 80)
        (+ 1 2)
        () nil   空リスト（要素数が0のリスト）
　　　　((apple 80) (orange 60))   リストの入れ子（多重リスト）
　　　注意：リスト内の要素の順序が意味を持つ
　　　　　(1 2 3) (2 1 3) は別のリストとみなされる
　　　リストのうち、評価してほしくないリストには　'をつける。
　　　　　'(1 2)  第1要素（ここでは１)は関数ではない。

３．リスト操作関数
　3.1　car(カー）とcdr(クダー）
　　car  リストの先頭要素を取り出す
　　cdr  リストの先頭要素を取り除いたリストを返す

　※lisp使用中に入力内容にエラーがある場合には
   　　Break 1 [2]>
　　のようなプロンプトに変わります。これはエラー状態が続いていることを
　　意味していますので、カッコをつけずに quit と入力するか CTRL+Dで
　　通常のプロンプトでの入力待ちの状態に復帰できます。

    carとcdrは連続して使用することが多い。その場合、カッコの入れ子の表現でも
　　良いが、
　　　(car (cdr '(apple orange banana)))
      (cadr '(apple orange banana))
    は同じ表現となり、簡略表現が可能である。

　3.2 consとlist
    cons　第1引数を第２引数のリストの先頭に挿入する
　　list　与えられた引数を要素にしたリストを返す

４．変数
　純粋な関数型言語　変数が不要　　←　大昔の話

　(setq 変数名 引数）　　変数名に引数を代入する
　同じ変数名に再度setqをすることで、上書き可能

  (setq x 100)
  (setq name 'kai)
  (setq fruits '(apple orange kiwi))

演習
　(setq fruits '(apple orange banana kiwi))
　このあとで、grapeをfruitsの第３要素に挿入する関数を書きなさい。
　　考え方
　  (apple orange banana kiwi)
              grape (banana kiwi)
              orange (grape banana kiwi)
              apple (orange grape banana kiwi)
              (apple orange grape banana kiwi)
    解答例
　　(cons (car fruits)
          (cons (cadr fruits)
                (cons 'grape (cddr fruits))))

    (list (car fruits) (cadr fruits) 'grape (caddr fruits) (cadddr fruits))
      これも解答ではあるが、要素数が４のときしか使えない…

５．LISP関数の定義
　　ある機能を持つ関数を自作する

　　定義方法
　　　(defun <関数名> ([仮引数…]) <関数本体>)

　　例：与えられた整数を２倍する関数double
　　　(defun double (num) (* num 2))

　　例：台形の面積を求める関数trapezoid
      (defun trapezoid (a b h)
            (/ (* (+ a b) h) 2)
      )
      ※このように最後の括弧が釣り合うまで、複数行にわたってLISP式を入力可能

演習　指定された値を指定されたリストの第３要素として追加する関数insert3rd
    (insert3rd 'grape fruits)  →　(apple orange grape banana kiwi)
     動作確認
　　　　(setq numlist '(1 2 4 5 6))
        (insert3rd 3 numlist)   →(1 2 3 4 5 6)
     解答例
　　　　(defun insert3rd (elem alist)
            (cons (car alist)
                  (cons (cadr alist)
                        (cons elem (cddr alist)))))


演習　replace-firstという関数
　　　リストの先頭要素を指定した要素に置き換える関数を作成しなさい。
    (replace-first 'cat '(dog hamster rabbit))  →　(cat hamster rabbit)


６．その他の便利なリスト操作関数
　　(append '(1 2) '(3 4 5))   →　(1 2 3 4 5)   リストの連結
　　(reverse '(1 2 3 4 5))     →  (5 4 3 2 1)   逆順のリストを作成する
　　(last '(apple orange lemon))  → (lemon)     最後の要素を持つリストを返す

参考練習：(現時点では難しいので、のちほど）
　append  reverse  last と同じ働きをする関数を、
　myappend  myreverse  mylast という名前で定義して動作確認。
              

７．条件付き処理
　条件の記述に述語関数を使用する
　　実引数に関して、何かテストを行った結果(真偽、t または nil)を返す関数

　関数atom：実引数がアトムであるか。
　　(atom 'dog)   dogはアトムですか？　→　t(真)
    (atom '(dog)) (dog)はアトムですか？　→　nil(偽)

　関数listp：実引数がリストであるか。
　　(listp 'dog) →　nil
    (listp '(dog)) →　t

　関数numberp：実引数が数値であるか。
　　(numberp 10) →　t
    (numberp '(1)) →　nil

　関数zerop：実引数が数値0であるか。
　　(zerop (- 5 5)) →　t

　関数null：実引数がnilであるか。
　　(null nil) →　t
    (null (cdr '(apple)))  →　t

  関数equal：２つの実引数が等しいか。
　　(equal 5 (/ 10 2))  →　t

　関数<, >：２つの実引数の大小関係を判定する

　関数member：第1引数が第２引数のリストの要素になっているか。
　　(member 'a '(d e f a b c g))  →　t

演習
　実引数に与えられたリストが回文（前から見ても後ろから見ても同じ）であるかを
　調べる関数palp
    (palp '(1 2 3 2 1)) →　t　と返すような関数
    (defun palp (arg)
        (equal arg (reverse arg)))

条件分岐の表現
　条件式を表現するのに特別な関数condが用意されている。
　　(cond  ((条件1)  (処理1))
           ((条件2)  (処理2))
              ・
　　　　　　　・
　　　　　 ((条件n)  (処理n)) )
　例：pizzaならgoodを返し、pastaならbadを返す。それ以外ならokと返す関数testfood
    (defun testfood (food)
         (cond ((equal food 'pizza) 'good)
               ((equal food 'pasta) 'bad)
               ( t                  'ok)
          )
     )

論理関数not, or, and
  (or (条件1) (条件2) ・・・　(条件n))  条件1〜nのいずれかがtならばt。
  (and (条件1) (条件2) ・・・　(条件n))  条件1〜nのすべてがtならばt。


補助関数（ある関数を２つ以上の関数で構成可能）
演習
　二次方程式の解を求める関数quadraticを作成しなさい
　　　ax*x+bx+c=0
      (quadratic '(1 -8 15))  →　(3 5)または(5 3）と返す
    平方根はsqrtという関数を用いて求められる。
　　また、補助関数（ある関数を作るために、別に定義した関数）を使っても良い。


  解答例：
   (defun quadratic (a b c)
     (list (/ (+ (- b) (sqrt (- (* b b) (* 4.0 a c))))
              (* 2.0 a))
           (/ (- (- b) (sqrt (- (* b b) (* 4.0 a c))))
              (* 2.0 a))
      )
    )

  補助関数を使ってみると…　　二次方程式の判別式の値を使って、１つ目の
　解と２つ目の解を別々に求める。
　(defun quadratic (a b c)
     (list (pos-root a b c) (neg-root a b c)))
  (defun pos-root (a b c)
     (/ (+ (- b) (discriminant a b c)) (* 2.0 a)))
  (defun neg-root (a b c)
     (/ (- (- b) (discriminant a b c)) (* 2.0 a)))
  (defun discriminant (a b c))
     (sqrt (- (* b b) (* 4.0 a c))))

８．数学関数sqrt, abs(絶対値), mod(剰余）


９．入出力関数
　print関数：一つの実引数を表示する
　read関数：キーボードから入力された値を読み取る
　　　(read)
    (+ (read) (read))

    (defun print-sum ()
       (print '(type two numbers))
       (print (+ (read) (read))))


10．LISPの関数の中でも複数の関数で構成できる
　（defun 関数名　(引数リスト)
       LISP式1
       LISP式2
         ・
         ・
　　　 LISP式n
   )
    この関数の返す値は、最後のLISP式の値となる

関数の中での局所変数の使用
　(let (局所変数リスト)
       LISP式1
       LISP式2
         ・
         ・
　　　 LISP式n
   )
    このlet関数の中で局所変数を使用することができ、返す値は最後のLISP式

　局所変数の初期化もできる
　　例：(let ((val1 0) (val2 1))  これでval1=0, val2=1の初期化ができる

11．反復処理（ループ）
　loop関数
　　(loop
       LISP式1
       LISP式2
         ・
         ・
　　　 LISP式n
   　)
　　　式1〜nの順に繰り返す。loop関数を終了するには、条件式とreturn関数を用いる
　　　　(cond ((zerop x) (return y)))

　例：リストの要素数を数える関数elemcountを作成する
    (defun elemcount (arg)
         (let ((count 0))
              (loop
                  (cond ((null arg) (return count)))
                  (setq arg (cdr arg))
                  (setq count (+ count 1))
              )
         )
    )


12．関数定義ファイルの読み込み（load）
　関数定義などのLisp式をemacsなどで「○○○.lisp」というファイルに記述しておくと、
　次のようにすることにより、それらの関数定義をインタープリタに読み込ませることが
　できる。
　　(load "./○○○.lisp")

　.lispのファイルに複数の関数定義を記述することができ、loadするたびに、記述されて
　いる関数定義がすべて読み直される。インタープリタで定義されている関数を用いれば、
　記述された定義に従って評価される。

